// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

#pragma once

#include "api_photos_response.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeApiPhotosResponse final : ::djinni::JniInterface<::djinni_rest_gen::ApiPhotosResponse, NativeApiPhotosResponse> {
public:
    using CppType = std::shared_ptr<::djinni_rest_gen::ApiPhotosResponse>;
    using CppOptType = std::shared_ptr<::djinni_rest_gen::ApiPhotosResponse>;
    using JniType = jobject;

    using Boxed = NativeApiPhotosResponse;

    ~NativeApiPhotosResponse();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeApiPhotosResponse>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeApiPhotosResponse>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeApiPhotosResponse();
    friend ::djinni::JniClass<NativeApiPhotosResponse>;
    friend ::djinni::JniInterface<::djinni_rest_gen::ApiPhotosResponse, NativeApiPhotosResponse>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::djinni_rest_gen::ApiPhotosResponse
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void on_index_success(const std::vector<::djinni_rest_gen::PhotoModel> & result) override;
        void on_show_success(const ::djinni_rest_gen::PhotoModel & result) override;
        void on_failure() override;

    private:
        friend ::djinni::JniInterface<::djinni_rest_gen::ApiPhotosResponse, ::djinni_generated::NativeApiPhotosResponse>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/mycompany/djinni_rest/ApiPhotosResponse") };
    const jmethodID method_onIndexSuccess { ::djinni::jniGetMethodID(clazz.get(), "onIndexSuccess", "(Ljava/util/ArrayList;)V") };
    const jmethodID method_onShowSuccess { ::djinni::jniGetMethodID(clazz.get(), "onShowSuccess", "(Lcom/mycompany/djinni_rest/PhotoModel;)V") };
    const jmethodID method_onFailure { ::djinni::jniGetMethodID(clazz.get(), "onFailure", "()V") };
};

}  // namespace djinni_generated
