// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from djinni_rest.djinni

#pragma once

#include "api_response.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeApiResponse final : ::djinni::JniInterface<::djinni_rest_gen::ApiResponse, NativeApiResponse> {
public:
    using CppType = std::shared_ptr<::djinni_rest_gen::ApiResponse>;
    using CppOptType = std::shared_ptr<::djinni_rest_gen::ApiResponse>;
    using JniType = jobject;

    using Boxed = NativeApiResponse;

    ~NativeApiResponse();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeApiResponse>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeApiResponse>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeApiResponse();
    friend ::djinni::JniClass<NativeApiResponse>;
    friend ::djinni::JniInterface<::djinni_rest_gen::ApiResponse, NativeApiResponse>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::djinni_rest_gen::ApiResponse
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void on_success(const std::string & result) override;
        void on_failure() override;

    private:
        friend ::djinni::JniInterface<::djinni_rest_gen::ApiResponse, ::djinni_generated::NativeApiResponse>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/mycompany/djinni_rest/ApiResponse") };
    const jmethodID method_onSuccess { ::djinni::jniGetMethodID(clazz.get(), "onSuccess", "(Ljava/lang/String;)V") };
    const jmethodID method_onFailure { ::djinni::jniGetMethodID(clazz.get(), "onFailure", "()V") };
};

}  // namespace djinni_generated
