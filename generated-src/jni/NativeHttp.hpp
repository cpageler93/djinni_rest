// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from djinni_rest.djinni

#pragma once

#include "djinni_support.hpp"
#include "http.hpp"

namespace djinni_generated {

class NativeHttp final : ::djinni::JniInterface<::djinni_rest_gen::Http, NativeHttp> {
public:
    using CppType = std::shared_ptr<::djinni_rest_gen::Http>;
    using CppOptType = std::shared_ptr<::djinni_rest_gen::Http>;
    using JniType = jobject;

    using Boxed = NativeHttp;

    ~NativeHttp();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeHttp>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeHttp>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeHttp();
    friend ::djinni::JniClass<NativeHttp>;
    friend ::djinni::JniInterface<::djinni_rest_gen::Http, NativeHttp>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::djinni_rest_gen::Http
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void send(::djinni_rest_gen::HttpMethod http_method, const std::string & url, const std::shared_ptr<::djinni_rest_gen::HttpCallback> & callback) override;

    private:
        friend ::djinni::JniInterface<::djinni_rest_gen::Http, ::djinni_generated::NativeHttp>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/mycompany/djinni_rest/Http") };
    const jmethodID method_send { ::djinni::jniGetMethodID(clazz.get(), "send", "(Lcom/mycompany/djinni_rest/HttpMethod;Ljava/lang/String;Lcom/mycompany/djinni_rest/HttpCallback;)V") };
};

}  // namespace djinni_generated
