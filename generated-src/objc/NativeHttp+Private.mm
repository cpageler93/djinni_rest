// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from djinni_rest.djinni

#import "NativeHttp+Private.h"
#import "NativeHttp.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "NativeHttpCallback+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class Http::ObjcProxy final
: public ::djinni_rest_gen::Http
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void send(::djinni_rest_gen::HttpMethod c_http_method, const std::string & c_url, const std::shared_ptr<::djinni_rest_gen::HttpCallback> & c_callback) override
    {
        @autoreleasepool {
            [Handle::get() send:(::djinni::Enum<::djinni_rest_gen::HttpMethod, NativeHttpMethod>::fromCpp(c_http_method))
                            url:(::djinni::String::fromCpp(c_url))
                       callback:(::djinni_generated::HttpCallback::fromCpp(c_callback))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto Http::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Http::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
