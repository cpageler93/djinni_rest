// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from djinni_rest.djinni

#import "NativeHttpCallback+Private.h"
#import "NativeHttpCallback.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NativeHttpCallbackCppProxy : NSObject<NativeHttpCallback>

- (id)initWithCpp:(const std::shared_ptr<::djinni_rest_gen::HttpCallback>&)cppRef;

@end

@implementation NativeHttpCallbackCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::djinni_rest_gen::HttpCallback>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::djinni_rest_gen::HttpCallback>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onSuccess:(int16_t)httpCode
             data:(nonnull NSString *)data {
    try {
        _cppRefHandle.get()->on_success(::djinni::I16::toCpp(httpCode),
                                        ::djinni::String::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onFailure {
    try {
        _cppRefHandle.get()->on_failure();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class HttpCallback::ObjcProxy final
: public ::djinni_rest_gen::HttpCallback
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void on_success(int16_t c_http_code, const std::string & c_data) override
    {
        @autoreleasepool {
            [Handle::get() onSuccess:(::djinni::I16::fromCpp(c_http_code))
                                data:(::djinni::String::fromCpp(c_data))];
        }
    }
    void on_failure() override
    {
        @autoreleasepool {
            [Handle::get() onFailure];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto HttpCallback::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[NativeHttpCallbackCppProxy class]]) {
        return ((NativeHttpCallbackCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto HttpCallback::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->Handle::get();
    }
    return ::djinni::get_cpp_proxy<NativeHttpCallbackCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
